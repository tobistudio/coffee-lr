---
description: Integration testing patterns for Medusa applications including API testing, database testing, and workflow testing
globs: 
  - "**/*.test.ts"
  - "**/*.test.tsx"
  - "**/*.spec.ts"
  - "**/*.spec.tsx"
  - "**/test/**/*.ts"
  - "**/test/**/*.tsx"
  - "**/__tests__/**/*.ts"
  - "**/__tests__/**/*.tsx"
alwaysApply: true
---

# Integration Testing Patterns for Medusa Applications

You are an expert in integration testing TypeScript applications, focusing on testing how different parts of the system work together in Medusa and React applications.

## Core Testing Principles

- Write tests that verify interactions between different system components
- Test real integrations with databases, APIs, and external services
- Use descriptive test names that explain the integration being tested
- Arrange, Act, Assert (AAA) pattern for test structure
- Test realistic scenarios and data flows
- Use proper test data setup and cleanup
- Ensure tests are isolated and can run independently

## Integration Testing

### API Route Testing
```typescript
// api/__tests__/products.test.ts
import { createMedusaContainer } from "@medusajs/framework/utils"
import { medusaIntegrationTestRunner } from "@medusajs/test-utils"

medusaIntegrationTestRunner({
  testSuite: ({ getContainer, api }) => {
    describe("Products API", () => {
      let container: MedusaContainer

      beforeEach(() => {
        container = getContainer()
      })

      describe("GET /admin/products", () => {
        it("should return list of products", async () => {
          // Arrange - create test data
          const productService = container.resolve("productService")
          await productService.create({
            title: "Test Product",
            handle: "test-product",
          })

          // Act
          const response = await api.get("/admin/products")

          // Assert
          expect(response.status).toBe(200)
          expect(response.data.products).toHaveLength(1)
          expect(response.data.products[0].title).toBe("Test Product")
        })

        it("should filter products by title", async () => {
          // Arrange
          const productService = container.resolve("productService")
          await productService.create({
            title: "Product A",
            handle: "product-a",
          })
          await productService.create({
            title: "Product B",
            handle: "product-b",
          })

          // Act
          const response = await api.get("/admin/products?q=Product A")

          // Assert
          expect(response.status).toBe(200)
          expect(response.data.products).toHaveLength(1)
          expect(response.data.products[0].title).toBe("Product A")
        })
      })

      describe("POST /admin/products", () => {
        it("should create a new product", async () => {
          // Arrange
          const productData = {
            title: "New Product",
            handle: "new-product",
            description: "A new product",
          }

          // Act
          const response = await api.post("/admin/products", productData)

          // Assert
          expect(response.status).toBe(201)
          expect(response.data.product.title).toBe(productData.title)
          expect(response.data.product.handle).toBe(productData.handle)
        })

        it("should return validation error for invalid data", async () => {
          // Arrange
          const invalidData = {
            title: "", // Empty title should fail validation
          }

          // Act
          const response = await api.post("/admin/products", invalidData)

          // Assert
          expect(response.status).toBe(400)
          expect(response.data.errors).toBeDefined()
        })
      })
    })
  },
})
```

### Database Integration Testing
```typescript
// modules/__tests__/UserModule.integration.test.ts
import { createMedusaContainer } from "@medusajs/framework/utils"
import { DataSource } from "typeorm"

describe("User Module Integration", () => {
  let container: MedusaContainer
  let dataSource: DataSource

  beforeAll(async () => {
    container = createMedusaContainer()
    dataSource = container.resolve("dataSource")
    await dataSource.initialize()
  })

  afterAll(async () => {
    await dataSource.destroy()
  })

  beforeEach(async () => {
    // Clean database before each test
    await dataSource.query("TRUNCATE TABLE users CASCADE")
  })

  it("should persist user data correctly", async () => {
    // Arrange
    const userService = container.resolve("userService")
    const userData = {
      name: "John Doe",
      email: "john@example.com",
    }

    // Act
    const createdUser = await userService.create(userData)
    const retrievedUser = await userService.findById(createdUser.id)

    // Assert
    expect(retrievedUser).toBeDefined()
    expect(retrievedUser!.name).toBe(userData.name)
    expect(retrievedUser!.email).toBe(userData.email)
    expect(retrievedUser!.createdAt).toBeInstanceOf(Date)
  })

  it("should handle database constraints", async () => {
    // Arrange
    const userService = container.resolve("userService")
    const userData = {
      name: "John Doe",
      email: "john@example.com",
    }

    // Act - create first user
    await userService.create(userData)

    // Assert - creating user with same email should fail
    await expect(userService.create(userData))
      .rejects
      .toThrow("Email already exists")
  })
})
```
