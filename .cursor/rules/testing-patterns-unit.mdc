---
description: Unit testing patterns for Medusa applications including service testing, component testing, and hook testing
globs: 
  - "**/*.test.ts"
  - "**/*.test.tsx"
  - "**/*.spec.ts"
  - "**/*.spec.tsx"
  - "**/test/**/*.ts"
  - "**/test/**/*.tsx"
  - "**/__tests__/**/*.ts"
  - "**/__tests__/**/*.tsx"
alwaysApply: true
---

# Unit Testing Patterns for Medusa Applications

You are an expert in unit testing TypeScript applications, focusing on testing individual components, services, and functions in isolation for Medusa and React applications.

## Core Testing Principles

- Write tests that are readable, maintainable, and reliable
- Focus on testing individual units in isolation
- Use descriptive test names that explain the behavior being tested
- Arrange, Act, Assert (AAA) pattern for test structure
- Test behavior, not implementation details
- Use proper mocking and stubbing strategies
- Ensure tests are isolated and can run independently

## Unit Testing Patterns

### Medusa Service Testing
```typescript
// services/__tests__/UserService.test.ts
import { createMedusaContainer } from "@medusajs/framework/utils"
import { UserService } from "../UserService"
import { User } from "../models/User"

describe("UserService", () => {
  let container: MedusaContainer
  let userService: UserService
  let mockRepository: jest.Mocked<any>

  beforeEach(() => {
    container = createMedusaContainer()
    
    mockRepository = {
      create: jest.fn(),
      findOne: jest.fn(),
      update: jest.fn(),
      delete: jest.fn(),
    }
    
    container.register("userRepository", mockRepository)
    userService = container.resolve("userService")
  })

  describe("create", () => {
    it("should create a new user with valid data", async () => {
      // Arrange
      const userData = {
        name: "John Doe",
        email: "john@example.com",
      }
      const expectedUser = { id: "user_123", ...userData }
      mockRepository.create.mockResolvedValue(expectedUser)

      // Act
      const result = await userService.create(userData)

      // Assert
      expect(mockRepository.create).toHaveBeenCalledWith(userData)
      expect(result).toEqual(expectedUser)
    })

    it("should throw validation error for invalid email", async () => {
      // Arrange
      const invalidUserData = {
        name: "John Doe",
        email: "invalid-email",
      }

      // Act & Assert
      await expect(userService.create(invalidUserData))
        .rejects
        .toThrow("Invalid email format")
    })
  })

  describe("findById", () => {
    it("should return user when found", async () => {
      // Arrange
      const userId = "user_123"
      const expectedUser = { id: userId, name: "John Doe" }
      mockRepository.findOne.mockResolvedValue(expectedUser)

      // Act
      const result = await userService.findById(userId)

      // Assert
      expect(mockRepository.findOne).toHaveBeenCalledWith({ id: userId })
      expect(result).toEqual(expectedUser)
    })

    it("should return null when user not found", async () => {
      // Arrange
      const userId = "nonexistent"
      mockRepository.findOne.mockResolvedValue(null)

      // Act
      const result = await userService.findById(userId)

      // Assert
      expect(result).toBeNull()
    })
  })
})
```

### React Component Testing
```typescript
// components/__tests__/ProductCard.test.tsx
import { render, screen, fireEvent } from "@testing-library/react"
import { ProductCard } from "../ProductCard"
import { Product } from "../../types"

const mockProduct: Product = {
  id: "prod_123",
  title: "Test Product",
  description: "A test product",
  handle: "test-product",
  thumbnail: "/test-image.jpg",
  variants: [{
    id: "variant_123",
    prices: [{
      amount: 2000,
      currency_code: "usd",
    }],
  }],
}

describe("ProductCard", () => {
  it("renders product information correctly", () => {
    render(<ProductCard product={mockProduct} />)
    
    expect(screen.getByText("Test Product")).toBeInTheDocument()
    expect(screen.getByText("$20.00")).toBeInTheDocument()
    expect(screen.getByRole("img")).toHaveAttribute("alt", "Test Product")
  })

  it("calls onAddToCart when add to cart button is clicked", () => {
    const mockOnAddToCart = jest.fn()
    
    render(
      <ProductCard 
        product={mockProduct} 
        onAddToCart={mockOnAddToCart} 
      />
    )
    
    fireEvent.click(screen.getByText("Add to Cart"))
    
    expect(mockOnAddToCart).toHaveBeenCalledWith(mockProduct.variants[0].id)
  })

  it("displays sold out state when no variants available", () => {
    const soldOutProduct = {
      ...mockProduct,
      variants: [],
    }
    
    render(<ProductCard product={soldOutProduct} />)
    
    expect(screen.getByText("Sold Out")).toBeInTheDocument()
    expect(screen.getByRole("button")).toBeDisabled()
  })
})
```

### Hook Testing
```typescript
// hooks/__tests__/useCart.test.ts
import { renderHook, act } from "@testing-library/react"
import { useCart } from "../useCart"

// Mock the medusa SDK
jest.mock("../../lib/medusa", () => ({
  medusa: {
    store: {
      cart: {
        create: jest.fn(),
        lineItem: {
          create: jest.fn(),
          update: jest.fn(),
          delete: jest.fn(),
        },
      },
    },
  },
}))

describe("useCart", () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })

  it("should initialize with empty cart", () => {
    const { result } = renderHook(() => useCart())
    
    expect(result.current.items).toEqual([])
    expect(result.current.total).toBe(0)
  })

  it("should add item to cart", async () => {
    const { result } = renderHook(() => useCart())
    
    await act(async () => {
      await result.current.addItem("variant_123", 2)
    })
    
    expect(result.current.items).toHaveLength(1)
    expect(result.current.items[0].quantity).toBe(2)
  })

  it("should update item quantity", async () => {
    const { result } = renderHook(() => useCart())
    
    // Add item first
    await act(async () => {
      await result.current.addItem("variant_123", 1)
    })
    
    // Update quantity
    await act(async () => {
      await result.current.updateQuantity("line_123", 3)
    })
    
    expect(result.current.items[0].quantity).toBe(3)
  })
})
```
